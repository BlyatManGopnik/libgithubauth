/* headless.go
 *
 * Copyright 2020 BlyatManGopnik
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *		http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Package headless contains the functions to authenticate with GitHub.
package headless

import (
	"errors"
	"fmt"
	"strings"

	"github.com/go-resty/resty/v2"
)

// Init contacts the API endpoint https://github.com/login/device/code
// to get a device-code needed for getting an auth-token and a user-code, which
// is what you enter at https://github.com/login/device to get an auth-token.
//
// @params Client ID of the GitHub OAuth Application. The Scope you want to request.
//
// @returns device-code, user-code, error
func Init(clientid string, scope string) (string, string, error) {
	if clientid == "" {
		return "", "", errors.New("No Client ID Provided")
	}
	scopelist := []string{"", "repo", "repo:status",
		"repo_deployment", "public_repo", "repo:invite",
		"security_events", "admin:repo_hook", "write:repo_hook",
		"read:repo_hook", "admin:org", "write:org",
		"read:org", "admin:public_key", "write:public_key",
		"read:public_key", "admin:org_hook", "gist",
		"notifications", "user", "read:user",
		"user:email", "user:follow", "delete_repo",
		"write:discussion", "read:discussion", "write:packages",
		"read:packages", "delete:packages", "admin:gpg_key",
		"write:gpg_key", "read:gpg_key", "workflow"}
	if strings.Contains(scope, ",") {
		scopeslice := strings.Split(scope, ",")
		for _, element := range scopeslice {
			if !contains(scopelist, element) {
				return "", "", errors.New("Invalid scope")
			}
		}
	} else if !contains(scopelist, scope) {
		return "", "", errors.New("Invalid scope")
	}
	client := resty.New()
	response, err := client.R().
		SetQueryString("client_id="+clientid+"&scope="+scope).
		SetHeader("User-Agent", "libgithubauth <https://github.com/BlyatManGopnik/libgithubauth>").
		SetHeader("Accept", "application/json").
		Post("https://github.com/login/device/code")
	jsondat := fmt.Sprint(response)
	if getJSONValue(jsondat, "error") == "Not Found" {
		return "", "", errors.New("Invalid Client ID")
	}
	if err != nil {
		return "", "", err
	}
	devicecode := getJSONValue(jsondat, "device_code")
	usercode := getJSONValue(jsondat, "user_code")
	return devicecode, usercode, nil
}

// GetAuthToken contacts the API endpoint https://github.com/login/oauth/access_token
// to check if you entered the user-code and if you entered the user-code, it gets the token
// generated by GitHub. Run this function every 5 seconds until you get the auth token so you don't spam the API.
// The function will return an error if it detects you havent put the user-code into the GitHub Login page.
//
// @params Client ID of the GitHub OAuth Application. device-code you got from Init()
//
// @returns authtoken, error
func GetAuthToken(clientid string, devicecode string) (string, error) {
	var authtoken string
	client := resty.New()
	resp, err := client.R().
		SetQueryString("client_id="+clientid+"&device_code="+devicecode+"&grant_type=urn:ietf:params:oauth:grant-type:device_code").
		SetHeader("User-Agent", "libgithubauth <https://github.com/BlyatManGopnik/libgithubauth>").
		SetHeader("Accept", "application/json").
		Post("https://github.com/login/oauth/access_token")
	jsondat := fmt.Sprint(resp)
	if err != nil {
		return "", err
	}
	if len(getJSONValue(jsondat, "access_token")) > 0 {
		authtoken = getJSONValue(jsondat, "access_token")
	} else if getJSONValue(jsondat, "error") == "authorization_pending" {
		return "authorization_pending", errors.New("Please enter the user-code into https://github.com/login/device")
	} else if getJSONValue(jsondat, "error") == "access_denied" {
		return "", errors.New("access_denied")
	}
	return authtoken, nil
}
